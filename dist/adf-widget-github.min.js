!function(){"use strict";function t(t){var e={reload:!0,category:"GitHub",controllerAs:"vm",edit:{templateUrl:"{widgetsPath}/github/src/edit.html"}},i=angular.extend({templateUrl:"{widgetsPath}/github/src/view.html",resolve:{commits:["github","config",function(t,e){return e.path?t.getCommits(e):void 0}]}},e);t.widget("githubHistory",angular.extend({title:"Github History",description:"Display the commit history of a GitHub project as chart",controller:"GithubHistoryController"},i)).widget("githubAuthor",angular.extend({title:"Github Author",description:"Displays the commits per author as pie chart",controller:"GithubAuthorController"},i)).widget("githubIssues",angular.extend({title:"Github Issues",description:"Displays issues as list of a GitHub project",controller:"GithubIssuesController",templateUrl:"{widgetsPath}/github/src/issues.html",resolve:{issues:function(t,e){return e.path?t.getIssues(e):void 0}}},e))}function e(t,e,i){function r(t){return o(s("issues",t))}function a(t){return o(s("commits",t))}function s(t,e){var r=i+e.path+"/"+t+"?callback=JSON_CALLBACK";return e.accessToken&&(r+="&access_token="+e.accessToken),r}function o(i){var r=t.defer();return e.jsonp(i).success(function(t){if(t&&t.meta){var e=t.meta.status;300>e?r.resolve(t.data):r.reject(t.data.message)}}).error(function(){r.reject()}),r.promise}var n={getCommits:a,getIssues:r};return n}function i(t,e){var i=this;i.issues=e}function r(t,e){function i(t){var e=t.split("-");return Date.UTC(e[0],e[1]-1,e[2])}var r=this,a={};angular.forEach(e,function(t){var e=t.commit.author.date;e=e.substring(0,e.indexOf("T")),a[e]?a[e]++:a[e]=1});var s=[];angular.forEach(a,function(t,e){s.push([i(e),t])}),s.sort(function(t,e){return t[0]-e[0]}),e&&(r.chartConfig={chart:{type:"spline"},title:{text:"Github commit history"},xAxis:{type:"datetime"},yAxis:{title:{text:"Commits"},min:0},series:[{name:t.path,data:s}]})}function a(t,e){var i=this,r={};angular.forEach(e,function(t){var e=t.commit.author.name;r[e]?r[e]++:r[e]=1});var a=[];if(angular.forEach(r,function(t,e){a.push([e,t])}),a.length>0){a.sort(function(t,e){return e[1]-t[1]});var s=a[0];a[0]={name:s[0],y:s[1],sliced:!0,selected:!0}}e&&(i.chartConfig={chart:{plotBackgroundColor:null,plotBorderWidth:null,plotShadow:!1},title:{text:t.path},plotOptions:{pie:{allowPointSelect:!0,cursor:"pointer",dataLabels:{enabled:!0,color:"#000000",connectorColor:"#000000",format:"<b>{point.name}</b>: {point.percentage:.1f} %"}}},series:[{type:"pie",name:t.path,data:a}]})}angular.module("adf.widget.github",["adf.provider","highcharts-ng"]).value("githubApiUrl","https://api.github.com/repos/").config(t),t.$inject=["dashboardProvider"],angular.module("adf.widget.github").run(["$templateCache",function(t){t.put("{widgetsPath}/github/src/edit.html",'<form role=form><div class=form-group><label for=path>Github Repository Path</label> <input type=text class=form-control id=path ng-model=config.path placeholder="Enter Path (username/reponame)"></div><div class=form-group><label for=path>Access Token</label> <input type=text class=form-control id=path ng-model=config.accessToken></div></form>'),t.put("{widgetsPath}/github/src/issues.html",'<div><div ng-if=!config.path class="alert alert-info">Please configure the widget</div><div ng-if=config.path><ul class=media-list><li class=media ng-repeat="issue in vm.issues"><div class=media-left><img class="media-object img-thumbnail" ng-src={{issue.user.avatar_url}} style="width: 64px; height: 64px;"></div><div class=media-body><h4 class=media-heading><a href={{issue.html_url}} target=_blank>{{issue.number}} {{issue.title}}</a></h4><p>{{issue.body | limitTo: 128}}</p><small><a href={{issue.user.html_url}}>{{issue.user.login}}</a>, {{issue.created_at | date: \'yyyy-MM-dd HH:mm\'}}</small></div></li></ul></div></div>'),t.put("{widgetsPath}/github/src/view.html",'<div><div class="alert alert-info" ng-if=!vm.chartConfig>Please insert a repository path in the widget configuration</div><div ng-if=vm.chartConfig><highchart id=chart1 config=vm.chartConfig></highchart></div></div>')}]),angular.module("adf.widget.github").factory("github",e),e.$inject=["$q","$http","githubApiUrl"],angular.module("adf.widget.github").controller("GithubIssuesController",i),i.$inject=["config","issues"],angular.module("adf.widget.github").controller("GithubHistoryController",r),r.$inject=["config","commits"],angular.module("adf.widget.github").controller("GithubAuthorController",a),a.$inject=["config","commits"]}(window);